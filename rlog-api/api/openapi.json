{
  "swagger": "2.0",
  "info": {
    "title": "Swagger RLog",
    "version": "1.0.5",
    "description": "This is a server for Rlog-api"
  },
  "tags": [
    {
      "name": "User",
      "description": ""
    },
    {
      "name": "Account",
      "description": ""
    }
  ],
  "paths": {
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Login user after validation",
        "description": "",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "Access Token"
          }
        ],
        "responses": {
          "200": {
            "description": "If user exists, it returns User Details after verification ",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "If User doesn't exist",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login user after validation",
        "description": "",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "Access Token"
          }
        ],
        "responses": {
          "200": {
            "description": "If user exists, it returns User Details after verification ",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "If User doesn't exist, it gets created ",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/invites": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Invite user",
        "description": "",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "Access Token"
          }
        ],
        "responses": {
          "201": {
            "description": "user invited",
            "schema": {
              "$ref": "#/definitions/AccountDetails"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "create account",
        "description": "Id for account just created",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "Name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "zopsmart"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "account created",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad_Request_Error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/{accountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "get account",
        "description": "get account with particular account Id",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          }
        ],
        "responses": {
          "200": {
            "description": "Found Account",
            "schema": {
              "$ref": "#/definitions/AccountFound"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update account",
        "description": "Update a particular account",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          },
          {
            "name": "Name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Kroger"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated account",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad_Request_Error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete account",
        "description": "Delete account for particular accountId",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted account",
            "schema": {
              "$ref": "#/definitions/AccountDel"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      }
    },
    "/account/{accountId}/invite": {
      "post": {
        "tags": [
          "Account User"
        ],
        "summary": "send invitation",
        "description": "",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "gives accountId in path"
          },
          {
            "name": "emails",
            "in": "body",
            
            "required": true,
            "description": "requested from body",
            "schema": {
              "type": "object",
              "properties": {
                "emails": {
                  "type": "object",
                  "example": [
                    "xyz@zopsmart.com" ,
                    "abc@mcafee.com"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "invitation send",
            "schema": {
              "$ref": "#/definitions/AccountUser"
            }
          },
          "400": {
            "description": "Bad Request Error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/{accountId}/accept": {
      "post": {
        "tags": [
          "Account User"
        ],
        "summary": "accept invitation",
        "description": "",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "gives accountId in path"
          }
        ],
        "responses": {
          "201": {
            "description": "inviatation accept",
            "schema": {
              "$ref": "#/definitions/AccountUser"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found Error",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      }
    },
    "/account/{accountId}/decline": {
      "put": {
        "tags": [
          "Account User"
        ],
        "summary": "decline invitation",
        "description": "return OK",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "gives accountId in path"
          }
        ],
        "responses": {
          "201": {
            "description": "decline invitation",
            "schema": {
              "$ref": "#/definitions/AccountUser"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found Error",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      }
    },
    "/account/{accountId}/users": {
      "get": {
        "tags": [
          "Account User"
        ],
        "summary": "users belongs to accounts",
        "description": "",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "gives accountId in path"
          }
        ],
        "responses": {
          "200": {
            "description": "send all users of that account",
            "schema": {
              "$ref": "#/definitions/UsersBelongToAccount"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found Error",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      }
    },
    "/account/{accountId}/application": {
      "post": {
        "tags": [
          "Application"
        ],
        "summary": "create application",
        "description": "Id and API key for application just created",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          },
          {
            "name": "Name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "RLOG"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "application created",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "400": {
            "description": "Bad_Request_Error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "get application with account Id",
        "description": "get application with particular account Id",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          }
        ],
        "responses": {
          "200": {
            "description": "Found Applications",
            "schema": {
              "$ref": "#/definitions/ApplicationFoundWithAccountId"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      }
    },
    "/account/{accountId}/application/{applicationId}": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "get application with account Id and application Id",
        "description": "get application with particular account Id and application Id",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          },
          {
            "name": "applicationId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of application"
          }
        ],
        "responses": {
          "200": {
            "description": "Found Application",
            "schema": {
              "$ref": "#/definitions/ApplicationFoundWithApplicationId"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Application"
        ],
        "summary": "Update application",
        "description": "Update a particular application",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          },
          {
            "name": "applicationId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of application"
          },
          {
            "name": "Name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "WorkSpace"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated account",
            "schema": {
              "$ref": "#/definitions/ApplicationUpdate"
            }
          },
          "400": {
            "description": "Bad_Request_Error",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Application"
        ],
        "summary": "Delete application",
        "description": "Delete account for particular accountId",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted account",
            "schema": {
              "$ref": "#/definitions/ApplicationDelete"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      }
    },
    "/logs": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Storing Logs",
        "description": "",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "API Key"
          },
          {
            "name": "logs",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "example": "Laptop"
                },
                "logLevel": {
                  "type": "string",
                  "example": "debug"
                },
                "message": {
                  "type": "string",
                  "example": "U.I. is not working"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If user exists, it returns User Details after verification ",
            "schema": {
              "$ref": "#/definitions/AccountUser"
            }
          },
          "201": {
            "description": "If User doesn't exist, it gets created ",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logs/{accountId}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieve Logs",
        "description": "get logs with particular account Id",
        "parameters": [
          {
            "name": "x-authenticated-token",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "authorization"
          },
          {
            "name": "accountId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of account"
          },
          {
            "name": "logLevel",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "filter logs with loglevel"
          },
          {
            "name": "source",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "filter logs with source"
          },
          {
            "name": "startDate",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "filter logs with startDate"
          },
          {
            "name": "endDate",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "filter logs with endDate"
          },
          {
            "name": "page",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "showing logs according to page number"
          },
          {
            "name": "endDate",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "showing logs according to limit"
          },
          {
            "name": "query",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "showing logs according to query match"
          }
        ],
        "responses": {
          "200": {
            "description": "Found Log",
            "schema": {
              "$ref": "#/definitions/logs"
            }
          },
          "401": {
            "description": "Unauthorized User",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "example": "c604765d-6eb8-41df-b960-a43202c2f01d"
            },
            "name": {
              "type": "string",
              "example": "User Name"
            },
            "emailId": {
              "type": "string",
              "example": "name.lastname@zopsmart.com"
            },
            "image": {
              "type": "string",
              "example": "https://1h3.googleusercontent.com/a/AATXAJwS4j7VeVOtbysLHrjaD-xh99TRHu-kaHxmOC M=s96-c"
            },
            "createdOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            },
            "updatedOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            },
            "userAccountDetails": {
              "example": "[]"
            }
          }
        }
      }
    },
    "Account": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "example": "3b4a2a12-a132-41c7-8e8e-09bb60614310"
            }
          }
        }
      }
    },
    "AccountFound": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "example": "62bd6664-fe6b-43a0-a754-37d02258ceb3"
            },
            "name": {
              "type": "string",
              "example": "ZopSmart"
            },
            "createdBy": {
              "type": "string",
              "example": "62bd6664-fe6b-43a0-a754-37d02258ceb3"
            },
            "createdOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            },
            "updatedOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            }
          }
        }
      }
    },
    "AccountDel": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "status": {
              "example": 200
            },
            "message": {
              "example": "deleted succesfully"
            }
          }
        }
      }
    },
    "AccountUser": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "example": "OK"
        }
      }
    },
    "Application": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "example": "3b4a2a12-a132-41c7-8e8e-09bb60614310"
            },
            "apiKey": {
              "example": "e75dab38-2f20-4d0e-9d28-ffd2d3f8009e"
            }
          }
        }
      }
    },
    "ApplicationFoundWithAccountId": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "example": "55b781fd-1eb6-49da-9cb7-19e549776014"
            },
            "accountId": {
              "example": "ad4d72d8-146e-4f79-bb53-5e8929b4e9f0"
            },
            "name": {
              "type": "string",
              "example": "RLOG"
            },
            "createdBy": {
              "type": "string",
              "example": "fa7056f4-a8ef-40d6-91aa-85eb2ecf1419"
            },
            "apiKey": {
              "example": "e75dab38-2f20-4d0e-9d28-ffd2d3f8009e"
            },
            "createdOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            },
            "updatedOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            },
            "createdByName": {
              "type": "string",
              "example": "Vikram Jothik Mateti"
            }
          }
        }
      }
    },
    "ApplicationFoundWithApplicationId": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "example": "9ccf48a6-49d8-47c9-8aa4-870794114db1"
            },
            "accountId": {
              "example": "573aa714-810b-438e-beb4-2298beddd4b2"
            },
            "name": {
              "type": "string",
              "example": "Rocket"
            },
            "createdBy": {
              "type": "string",
              "example": "14dd23bb-656a-4ff6-a0f3-48e281da0651"
            },
            "apiKey": {
              "example": "1388383c-e44e-46cc-b02c-ed507e3457ea"
            },
            "createdOn": {
              "type": "string",
              "example": "2022-05-12T08:26:10.0002"
            },
            "updatedOn": {
              "type": "string",
              "example": "2022-05-13T08:26:10.0002"
            },
            "createdByName": {
              "type": "string",
              "example": "Rishikesh"
            }
          }
        }
      }
    },
    "ApplicationUpdate": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "example": "b8f5538c-91e5-4e2c-8917-3bd28720e3f3"
            }
          }
        }
      }
    },
    "ApplicationDelete": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "status": {
              "example": 200
            },
            "message": {
              "example": "deleted succesfully"
            }
          }
        }
      }
    },
    "UsersBelongToAccount": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "example": "62bd6664-fe6b-43a0-a754-37d02258ceb3"
            },
            "name": {
              "type": "string",
              "example": "Atish Kushwaha"
            },
            "emailId": {
              "type": "string",
              "example": "Atish.Kushwaha@zopsmart.com"
            },
            "image": {
              "type": "string",
              "example": "https://lh3.googleusercontent.com/a/AATXAJyq5Il0UEeFEnUnNc0ld25jHBacWMH9a3iSYkxz=s96-c"
            },
            "createdOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            },
            "updatedOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            },
            "accountName": {
              "type": "string",
              "example": "Zopsmart"
            }
          }
        }
      }
    },
    "logs": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "applicationId": {
              "example": "55b781fd-1eb6-49da-9cb7-19e549776014"
            },
            "accountId": {
              "example": "ad4d72d8-146e-4f79-bb53-5e8929b4e9f0"
            },
            "createdOn": {
              "type": "string",
              "example": "2022-05-23T08:26:10.0002"
            },
            "logLevel": {
              "type": "string",
              "example": "debug"
            },
            "source": {
              "type": "string",
              "example": "laptop"
            },
            "message": {
              "type": "string",
              "example": "U.I. is not working"
            }
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "properties": {
            "code": {
              "example": "UNAUTHORIZED"
            },
            "reason": {
              "example": "Request was not authorized"
            },
            "datetime": {
              "type": "object",
              "properties": {
                "value": {
                  "example": "2022-05-24T09:29:13.177Z"
                },
                "timezone": {
                  "example": "Asia/Calcutta"
                }
              }
            },
            "rootCause": {
              "example": "[]"
            }
          }
        }
      }
    },
    "BadRequestError": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "properties": {
            "code": {
              "example": "Bad_Request"
            },
            "reason": {
              "example": "Invalid data provided"
            },
            "datetime": {
              "type": "object",
              "properties": {
                "value": {
                  "example": "2022-05-24T09:29:13.177Z"
                },
                "timezone": {
                  "example": "Asia/Calcutta"
                }
              }
            },
            "rootCause": {
              "example": "[]"
            }
          }
        }
      }
    },
    "NotFoundError": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "properties": {
            "code": {
              "example": "Not_Found"
            },
            "reason": {
              "example": "Data not found"
            },
            "datetime": {
              "type": "object",
              "properties": {
                "value": {
                  "example": "2022-05-24T09:29:13.177Z"
                },
                "timezone": {
                  "example": "Asia/Calcutta"
                }
              }
            },
            "rootCause": {
              "example": "[]"
            }
          }
        }
      }
    },
    "ForbiddenError": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "properties": {
            "code": {
              "example": "ForbiddenError"
            },
            "reason": {
              "example": "User not found"
            },
            "datetime": {
              "type": "object",
              "properties": {
                "value": {
                  "example": "2022-05-24T09:29:13.177Z"
                },
                "timezone": {
                  "example": "Asia/Calcutta"
                }
              }
            },
            "rootCause": {
              "example": "[]"
            }
          }
        }
      }
    },
    "AccountDetails": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "UserDetails": {
              "example": "[]"
            },
            "AccountNameInvitation": {
              "example": "[]"
            }
          }
        }
      }
    }
  }
}